/*
 * Copyright 2021 Aiven Oy
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        mavenCentral()
    }
}

wrapper {
    distributionType = 'ALL'
    doLast {
        def sha256Sum = new String(new URL("${distributionUrl}.sha256").bytes)
        propertiesFile << "distributionSha256Sum=${sha256Sum}\n"
        println "Added checksum to wrapper properties"
    }
}

subprojects {
    // https://docs.gradle.org/current/userguide/java_library_plugin.html
    apply plugin: "java"

    // https://docs.gradle.org/current/userguide/checkstyle_plugin.html
    apply plugin: "checkstyle"

    // https://docs.gradle.org/current/userguide/jacoco_plugin.html
    apply plugin: "jacoco"

    // https://docs.gradle.org/current/userguide/distribution_plugin.html
    apply plugin: "distribution"

    apply plugin: "idea"

    repositories {
        // Use Maven Central for resolving dependencies.
        mavenCentral()
        flatDir {
            dirs rootProject.file('lib')
        }
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11

        withJavadocJar()
        withSourcesJar()
    }

    checkstyle {
        toolVersion "8.44"
        getConfigDirectory().set(rootProject.file("checkstyle/"))
    }

    ext {
        testcontainersVersion = "1.17.6"
        junitVersion = "5.9.2"
        mockitoVersion = "5.1.1"

        // Don't bump this version without need, as this is the min supported version for the plugin.
        kafkaVersion = "3.0.0"
    }

    dependencies {
        compileOnly group: "org.apache.kafka", name: "kafka-storage-api", version: kafkaVersion
        compileOnly group: "org.apache.kafka", name: "kafka-clients", version: kafkaVersion
        compileOnly "org.slf4j:slf4j-api:1.7.36"
        implementation "org.bouncycastle:bcprov-jdk15on:1.70"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
        testImplementation group: "org.apache.kafka", name: "kafka-storage-api", version: kafkaVersion
        testImplementation group: "org.apache.kafka", name: "kafka-clients", version: kafkaVersion
        testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
        testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
        testImplementation "org.apache.kafka:kafka_2.12:2.8.0"
        testImplementation "org.testcontainers:junit-jupiter:$testcontainersVersion"
        testImplementation "org.testcontainers:kafka:$testcontainersVersion" // this is not Kafka version
        testImplementation "org.assertj:assertj-core:3.24.2"
        testImplementation group: 'org.mockito', name: 'mockito-core', version: mockitoVersion
        testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: mockitoVersion
    }

    tasks.named('test') {
        // Use junit platform for unit tests.
        useJUnitPlatform()
    }

    distributions {
        main {
            contents {
                from jar
                from sourcesJar
                from configurations.runtimeClasspath
            }
        }
    }
}
