/*
 * Copyright 2021 Aiven Oy
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id "java-library"
    id "distribution"
}

wrapper {
    distributionType = 'ALL'
    doLast {
        def sha256Sum = new String(new URL("${distributionUrl}.sha256").bytes)
        propertiesFile << "distributionSha256Sum=${sha256Sum}\n"
        println "Added checksum to wrapper properties"
    }
}

subprojects {
    // https://docs.gradle.org/current/userguide/java_library_plugin.html
    apply plugin: "java"

    // https://docs.gradle.org/current/userguide/checkstyle_plugin.html
    apply plugin: "checkstyle"

    // https://docs.gradle.org/current/userguide/jacoco_plugin.html
    apply plugin: "jacoco"

    // https://docs.gradle.org/current/userguide/distribution_plugin.html
    apply plugin: "distribution"

    apply plugin: "idea"

    repositories {
        // Use Maven Central for resolving dependencies.
        mavenCentral()
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11

        withJavadocJar()
        withSourcesJar()
    }

    checkstyle {
        toolVersion = "10.12.0"
        configDirectory = rootProject.file("checkstyle/")
    }

    ext {
        junitVersion = "5.9.3"
        mockitoVersion = "5.3.1"

        // Don't bump this version without need, as this is the min supported version for the plugin.
        kafkaVersion = "3.0.0"

        assertJVersion = "3.24.2"

        apacheCommonsIOVersion = "2.12.0"
    }

    dependencies {
        compileOnly "org.apache.kafka:kafka-clients:$kafkaVersion"
        compileOnly "org.apache.kafka:kafka-storage-api:$kafkaVersion"

        compileOnly "org.slf4j:slf4j-api:1.7.36"

        testImplementation "org.apache.kafka:kafka-clients:$kafkaVersion"
        testImplementation "org.apache.kafka:kafka-storage-api:$kafkaVersion"

        testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
        testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"

        testImplementation "org.assertj:assertj-core:$assertJVersion"

        testImplementation "org.mockito:mockito-core:$mockitoVersion"
        testImplementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"

        testRuntimeOnly "org.slf4j:slf4j-log4j12:1.7.36"
    }

    tasks.named('test') {
        // Use junit platform for unit tests.
        useJUnitPlatform()
    }

    sourceSets {
        integrationTest {
            java {
                srcDirs = ['src/integration-test/java']
            }
            resources {
                srcDirs = ['src/integration-test/resources']
            }

            compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
            runtimeClasspath += output + compileClasspath
        }
    }

    idea {
        module {
            testSourceDirs += sourceSets.integrationTest.java.srcDirs
            testSourceDirs += sourceSets.integrationTest.resources.srcDirs
        }
    }

    configurations {
        integrationTestImplementation.extendsFrom testImplementation
        integrationTestRuntime.extendsFrom testRuntimeClasspath
    }

    tasks.register('integrationTest', Test) {
        description = 'Runs the integration tests.'
        group = 'verification'
        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath

        shouldRunAfter test, distTar

        useJUnitPlatform()

        // Run always.
        outputs.upToDateWhen { false }
    }

    check.configure {
        dependsOn tasks.named("integrationTest")
    }

    distributions {
        main {
            contents {
                from jar
                from sourcesJar
                from configurations.runtimeClasspath
            }
        }
    }
}

distributions {
    main {
        contents {
            from(project(":core").jar)
            from(project(":core").configurations.runtimeClasspath)
            from(project(":storage:core").jar)
            from(project(":storage:core").configurations.runtimeClasspath)
            from(project(":storage:s3").jar)
            from(project(":storage:s3").configurations.runtimeClasspath)
            from(project(":storage:filesystem").jar)
            from(project(":storage:filesystem").configurations.runtimeClasspath)
        }
    }
}

tasks.distTar {
    compression = Compression.GZIP
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
}
